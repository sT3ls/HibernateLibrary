/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mylib.ui;

import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import mylib.util.HibernateUtil;
import mylib.entity.Links;
import mylib.entity.Books;

/**
 *
 * @author sT3ls
 */
public class MyHBLib extends javax.swing.JFrame {

    /**
     * Creates new form MyHBLib
     */
    public MyHBLib() {
        initComponents();
    }
    private static String QUERY_BASED_ON_BOOK_NAME="from Links l where l.books.bookName like '";
    private static String QUERY_BASED_ON_AUTHOR_NAME="from Links l where l.authors.authorName like '";
    private static String QUERY_BASED_ALL="from Links l";
 
    private void runQueryBasedALL() {
    executeHQLQuery(QUERY_BASED_ALL);
    }
    
    private void runQueryBasedOnBookName() {
    executeHQLQuery(QUERY_BASED_ON_BOOK_NAME + searchTextField.getText() + "%'");
    }
    
    private void runQueryBasedOnAuthorName() {
    executeHQLQuery(QUERY_BASED_ON_AUTHOR_NAME + searchTextField.getText() + "%'");
    }
    
    private void executeUpd() {
        if (FindAuthorsRBtn.isSelected())
            JOptionPane.showMessageDialog(null,"Change book find!!!");
        else{
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery("from Books b where b.bookName like '"+searchTextField.getText()+"%'");
            if(q.uniqueResult()==null || "".equals(searchTextField.getText()))
            {
                JOptionPane.showMessageDialog(null,"Book not found!!!");
                return;
            }
            Books book =(Books) q.uniqueResult();
            book.setStatus(StatusComboBox.getSelectedItem().toString());
            session.update(book);
            session.getTransaction().commit();
        } catch (HibernateException he) {
            he.printStackTrace();
        }}
        }
    
    private void executeDelete() {
        if (FindAuthorsRBtn.isSelected())
            JOptionPane.showMessageDialog(null,"Change book find!!!");
        else{
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery("from Links l where l.books.bookName like '"+searchTextField.getText()+"%'");
            List resultlist = q.list();
            if(resultlist.isEmpty() || "".equals(searchTextField.getText()))
            {
                JOptionPane.showMessageDialog(null,"Book not found");
                return;
            }
            for(Object o : resultlist)
            {
                Links link = (Links) o;
                session.delete(link);
                session.delete(link.getBooks());
            }
            session.getTransaction().commit();
        } catch (HibernateException he) {
            he.printStackTrace();
        }}
        }
    
    private void executeHQLQuery(String hql) {
    try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(hql);
        List resultList = q.list();
        displayResult(resultList);
        session.getTransaction().commit();
    } catch (HibernateException he) {
        he.printStackTrace();
    }
}
    
    private void displayResult(List resultList) {
    Vector<String> tableHeaders = new Vector<String>();
    Vector tableData = new Vector();
    tableHeaders.add("BookName"); 
    tableHeaders.add("AuthorName");
    tableHeaders.add("Status");

    for(Object o : resultList) {
        Links links = (Links)o;
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(links.getBooks().getBookName());
        oneRow.add(links.getAuthors().getAuthorName());
        oneRow.add(links.getBooks().getStatus());
        tableData.add(oneRow);
    }
    if(resultList.isEmpty())
        JOptionPane.showMessageDialog(null,"Item not found!!");
    ResultTable.setModel(new DefaultTableModel(tableData, tableHeaders));
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTextField = new javax.swing.JTextField();
        FindBooksRBtn = new javax.swing.JRadioButton();
        FindAuthorsRBtn = new javax.swing.JRadioButton();
        FindBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResultTable = new javax.swing.JTable();
        NewBookBtn = new javax.swing.JButton();
        ViewAllBooksBtn = new javax.swing.JButton();
        StatusComboBox = new javax.swing.JComboBox();
        StatusBtn = new javax.swing.JButton();
        DeleteBookBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        FindBooksRBtn.setSelected(true);
        FindBooksRBtn.setText("По книге");
        FindBooksRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindBooksRBtnActionPerformed(evt);
            }
        });

        FindAuthorsRBtn.setText("По автору");
        FindAuthorsRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindAuthorsRBtnActionPerformed(evt);
            }
        });

        FindBtn.setText("Поиск");
        FindBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindBtnActionPerformed(evt);
            }
        });

        ResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(ResultTable);

        NewBookBtn.setText("Добавить книгу");
        NewBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBookBtnActionPerformed(evt);
            }
        });

        ViewAllBooksBtn.setText("Показать все книги");
        ViewAllBooksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAllBooksBtnActionPerformed(evt);
            }
        });

        StatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "free", "sale", "is empty" }));

        StatusBtn.setText("Изменить статус книги");
        StatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusBtnActionPerformed(evt);
            }
        });

        DeleteBookBtn.setText("Удалить книгу");
        DeleteBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(FindBooksRBtn)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(searchTextField))
                            .add(layout.createSequentialGroup()
                                .add(FindAuthorsRBtn)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(FindBtn)
                                .add(18, 18, 18)
                                .add(ViewAllBooksBtn)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(NewBookBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(DeleteBookBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(StatusBtn)
                            .add(StatusComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(FindBooksRBtn)
                    .add(searchTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(NewBookBtn)
                    .add(StatusComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ViewAllBooksBtn)
                    .add(FindAuthorsRBtn)
                    .add(FindBtn)
                    .add(StatusBtn)
                    .add(DeleteBookBtn))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void NewBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBookBtnActionPerformed
        // TODO add your handling code here:
        createbook.showframe();        
    }//GEN-LAST:event_NewBookBtnActionPerformed

    private void FindBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindBtnActionPerformed
        // TODO add your handling code here:
 
    if(!searchTextField.getText().trim().equals("") && FindBooksRBtn.isSelected()) {
        runQueryBasedOnBookName();
    } else if(!searchTextField.getText().trim().equals("") && FindAuthorsRBtn.isSelected()) {
        runQueryBasedOnAuthorName();
}
    }//GEN-LAST:event_FindBtnActionPerformed

    private void ViewAllBooksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAllBooksBtnActionPerformed
        // TODO add your handling code here:
        runQueryBasedALL();
    }//GEN-LAST:event_ViewAllBooksBtnActionPerformed

    private void FindBooksRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindBooksRBtnActionPerformed
        // TODO add your handling code here:
        FindAuthorsRBtn.setSelected(false);
    }//GEN-LAST:event_FindBooksRBtnActionPerformed

    private void FindAuthorsRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindAuthorsRBtnActionPerformed
        // TODO add your handling code here:
        FindBooksRBtn.setSelected(false);
    }//GEN-LAST:event_FindAuthorsRBtnActionPerformed

    private void StatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusBtnActionPerformed
        // TODO add your handling code here:
        executeUpd();
    }//GEN-LAST:event_StatusBtnActionPerformed

    private void DeleteBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookBtnActionPerformed
        // TODO add your handling code here:
        executeDelete();
    }//GEN-LAST:event_DeleteBookBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyHBLib.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyHBLib.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyHBLib.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyHBLib.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyHBLib().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteBookBtn;
    private javax.swing.JRadioButton FindAuthorsRBtn;
    private javax.swing.JRadioButton FindBooksRBtn;
    private javax.swing.JButton FindBtn;
    private javax.swing.JButton NewBookBtn;
    private javax.swing.JTable ResultTable;
    private javax.swing.JButton StatusBtn;
    private javax.swing.JComboBox StatusComboBox;
    private javax.swing.JButton ViewAllBooksBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
